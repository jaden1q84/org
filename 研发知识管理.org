* 程序员能力矩阵
** 计算机科学
*** 数据结构
**** 0级
不清楚数据和链表的差异
**** 1级
理解和使用数组、链表、字典等级别数据结构，并用于实际编程任务
**** 2级
理解各种级别数据结构时间和空间的对比关系，解释和实现哈希表和处理冲突，了解优先队列及实现
**** 3级
掌握高等数据结构知识，如：B-树、二项堆、AVL树、红黑树、伸展树、前缀树等等。并应用于程序开发。
*** 算法
**** 0级
不会算出一个数组的平均值
**** 1级
了解基本的排序、搜索和数据遍历检索算法
**** 2级
树、图，简单的贪婪算法和分而治之算法
**** 3级
辨识和编写动态规划方案，良好的图算法知识，良好的数值估算能力，能辨别NP问题等
*** 编程体系
**** 0级
不知道编译器、链接器、解释器
**** 1级
对编译器、链接器、解释器有基本的了解。了解汇编代码和在硬件层如何工作。了解虚拟内存和分页知识。
**** 2级
了解内核模式vs用户模式，多线程，同步原语以及其实现原理，能阅读汇编代码，了解网络工作原理，基本网络协议和Socket编程
**** 3级
了解程序堆栈、硬件（CPU、内存、中断、微码）、二进制代码、汇编、静态和动态链接、内存碎片回收、堆、栈、寄存器编址等高级编程体系知识

** 软件工程
*** 版本控制
**** 0级
通过文件夹备份文件
**** 1级
了解SVN基本功能和初级使用
**** 2级
熟练SVN高级特性，能执行分支和合并，使用代码补丁
**** 3级
熟练并使用分布式版本控制系统的各种特性，如GIT，能管控多个代码分支。
*** 自动化编译
**** 0级
只会使用IDE编译
**** 1级
知道如何通过命令行进行编译，了解makefile原理
**** 2级
能够编写脚本、makefile构建基本编译系统
**** 3级
能够编写脚本构建编译系统，并自动归档、部署程序、生成发布记录和在CVS分配对应tag，管理发布tag。

*** 自动化测试
**** 0级
认为测试都是测试人员的工作
**** 1级
能编写自动化的单元或接口测试，以及提供良好的测试案例
**** 2级
按照TDD方式编写代码
**** 3级
了解并能高效执行自动化安装、部署，自动执行功能、性能测试，并输出报告。


** 程序设计
*** 功能分解
**** 0级
直线式代码，通过复制粘贴来复用
**** 1级
把功能分解到到多个函数
**** 2级
能抽象出可复用的函数/对象实现功能
**** 3级
使用适宜的数据结构和算法，实现通用的抽象封装代码，应付易变的功能层面。

*** 系统分解
**** 0级
用单一文件或类来实现系统
**** 1级
在同一技术领域下，能够对系统空间分解和设计方案分解
**** 2级
能够设计跨技术/平台的系统
**** 3级
能够在多个产品线设计复杂的系统。同时也能够设计系统监视、报告、故障恢复等运维功能。

*** 单个源码文件的组织
**** 0级
单个文件的代码组织没有依据
**** 1级
按照逻辑或相近的方式组织文件内的代码
**** 2级
代码按易于理解阅读的方式进行分块，引用其他源文件时有良好的注释
**** 3级
文档头部有许可声明，总结，良好的注释，一致的空格缩进，文档外观美观。

*** 跨源码文件代码组织
**** 0级
不考虑跨文件组织代码
**** 1级
相关的文件按文件夹分组
**** 2级
每个文件有独立的目的，比如一个类定义、一个内部特性的实现。易于单独阅读和分析。
**** 3级
源码文件组织紧密，在文件名上与设计相匹配，可以通过文件组织方式洞察设计理念。

*** 源码树组织
**** 0级
一切都放一个文件内
**** 1级
将代码分散到对应逻辑的文件夹
**** 2级
没有循环依赖，二进制文件、库、文档、构建、第三方代码都组织到合适的文件夹
**** 3级
源码树的物理布局与逻辑层次、组织方式相匹配。可以通过目录名称和组织方式洞察设计理念。

*** 代码可读性
**** 0级
变量或函数名采用单音节或拼音名称
**** 1级
对文件、变量、类、方法等，有良好的命名
**** 2级
没有长函数，对不常规的代码注释解释其意图，注释bug修复，代码假设前提等。
**** 3级
代码假设验证使用断言，自然的代码流，没有深层嵌套的条件和方法

*** 防御性编程
**** 0级
不了解何为防御性编程
**** 1级
检查代码中所有的参数，对关键的假设进行断言
**** 2级
确保检查了返回值和使代码失败的异常
**** 3级
有自己的库来帮助防御性编程、编写单元测试模拟故障

*** 错误处理
**** 0级
只考虑乐观情况
**** 1级
基本的代码错误处理，抛出异常/生成错误
**** 2级
确保错误/异常留在程序中有良好的状态，资源，连接，内存都有被合适的清理
**** 3级
在编码之前察觉可能出现的异常，在代码的所有层次中维持一致性的异常处理策略，提出整个系统的错误处理准则

*** API运用
**** 0级
需要频繁地查阅文档
**** 1级
把最频繁使用的API记在脑子里
**** 2级
有广阔且深入的API知识
**** 3级
为了使实际任务中常用API使用更加便捷，编写过API的上层库，填补API之间的缺口

*** 需求分析
**** 0级
接受给定的需求和代码规格
**** 1级
能对规格的遗漏提出疑问
**** 2级
了解全面情况，提出需要被规格化的整体范围
**** 3级
能够提出更好的可选方案，根据经验的给出需求

*** 脚本能力
**** 0级
不具备脚本工具的知识
**** 1级
基础批处理/SHELL脚本的使用
**** 2级
Perl/Python/Ruby……等高级脚本运用
**** 3级
写过并且发表过可重用的脚本代码

** 知识积累
*** 工具知识
**** 0级
仅限于主流IDE工具
**** 1级
知道一些流行和标准工具的备选方案


* Linux程序开发
** 基础知识
*** 基础入门
实验楼-Linux基础入门 https://www.shiyanlou.com/courses/1
*** 命令行
Linux命令行：《The Linux Command Line》（TLCL）http://billie66.github.io/TLCL/index.html
*** 性能监控、测试、调优工具
Linux性能监控、测试、调优工具 http://www.vpsee.com/2014/09/linux-performance-tools/
*** 其他：学习资源整理
Linux学习资源整理 https://zhuanlan.zhihu.com/p/22654634

** 程序开发
*** C程序开发
**** 数据结构/算法
参考 [[%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6][计算机科学]] 内容
**** 调测工具
GDB

**** 相关书单
《UNIX环境高级编程》(APUE)
《程序员自我修养》

*** 网络编程
**** 相关书单
《TCP/IP详解卷1》
《UNIX网络编程卷1》(UNP)

*** 脚本开发
